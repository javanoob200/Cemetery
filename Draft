// Name: Woodrow Turbyfill
// Date: 01/22/19
import java.util.Scanner;
import java.io.File;
import java.io.FileNotFoundException;
import java.text.DecimalFormat;

public class Cemetery
{
    public static void main (String [] args) throws FileNotFoundException
   {
      File file = new File("cemetery.txt");
      int numEntries = countEntries(file);
      Person[] cemetery = readIntoArray(file, numEntries); 
      int min = locateMinAgePerson(cemetery);
      int max = locateMaxAgePerson(cemetery); 
      //for testing only
      //for (int i = 0; i < cemetery.length; i++) 
         //System.out.println(cemetery[i]);
      System.out.println("In the St. Mary Magdelene Old Fish Cemetery --> ");
      System.out.println("Name of youngest person: " + cemetery[min].getName());
      System.out.println("Age of youngest person: " + cemetery[min].getAge());    
      System.out.println("Name of oldest person: " + cemetery[max].getName());
      System.out.println("Age of oldest person: " + cemetery[max].getAge());      
   }
   
   /* Counts and returns the number of entries in File f.
      Uses a try-catch block.   
      @param f -- the file object
   */
   public static int countEntries(File f) throws FileNotFoundException
   {
       int count = 0;
       File file = new File("cemetery.txt");
       Scanner scan = new Scanner (file);
       while(scan.hasNext())
       {
        count++;
        scan.nextLine();
       }
       scan.close();
       return (count-4);
   }
   /* Reads the data.
      Fills the array with Person objects.
      Uses a try-catch block.   
      @param f -- the file object 
      @param num -- the number of lines in the File f  
   */
   public static Person[] readIntoArray (File f, int numEntries) throws FileNotFoundException
   {
   String[] burials = new String[numEntries];
   File file = new File("cemetery.txt");
   String newPerson;
   Scanner scan = new Scanner (file);
   newPerson = makeObjects();
   try{
       for(int i = 0; i < 4; i++)
        scan.nextLine();
       for(int i = 0; i<= numEntries; i++)
       {
        burials[i] = newPerson;
        scan.nextLine();
       }
   }
   catch(Exception e)
   {
    System.out.println("Please check the filename.");
   } 
   }
   
   
   /* A helper method that instantiates one Person object.
      @param entry -- one line of the input file.
   */
   private static Person makeObjects(String entry)
   {
       String p = Person();
   }  
  
   /* Finds and returns the location (the index) of the Person
      who is the youngest.
      @param arr -- an array of Person objects.
   */
   public static int locateMinAgePerson(Person[] arr)
   {
      double newMin = 0;
      for (int i = 0; i < arr.length; i++)
           if((arr[i].getAge() > arr[i+1].getAge()))
           {
               newMin = (arr[i+1].getAge());
           }
           int location;
      for (int i = 0; i < arr.length; i++)
            if (newMin == arr[i].getAge())
                location= i;
      return location;
   }   
   
   /* Finds and returns the location (the index) of the Person
      who is the oldest.
      @param arr -- an array of Person objects.
   */
   public static int locateMaxAgePerson(Person[] arr)
   {
      double newMax = 0;
      for (int i = 0; i < arr.length; i++)
           if((arr[i].getAge() < arr[i+1].getAge()))
           {
               newMax = (arr[i+1].getAge());
           }
      int location;
      for (int i = 0; i < arr.length; i++)
            if (newMax == arr[i].getAge())
                location= i;
      return location;
   }        
}

class Person
{
   /* private fields  */
   private String age;
   private String burial;
   private String name;
   private double dAge;
   private DecimalFormat df = new DecimalFormat("0.0000"); 
   /* a three-arg constructor  */
   Person(String a, String b, String n)
   {
       age = a.substring(36,42).trim();
       burial = a.substring(25,37).trim();
       name = a.substring(0,25).trim();
    }
   /* any necessary accessor methods */
   double getAge()
   {
       dAge = calculateAge(age);
       return dAge;
   }
   String getName()
   {
       return name;
   }
   public double calculateAge(String a)
   {
       if (age.contains("d"))
       {
            double d = 0.00273973;
            age = age.substring(0,(age.length()-1));
            double dAge = Double.parseDouble(age);
            dAge = (dAge*d);
       }
       else if (age.contains("w"))
       {
            double w = 0.01917808;
            age = age.substring(0,(age.length()-1));
            double dAge = Double.parseDouble(age);
            dAge = (dAge*.01917808);
       }
       else
            Double.parseDouble(age);
       return dAge;
   }
} 
